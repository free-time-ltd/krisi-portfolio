service: image-thumb-service
frameworkVersion: '3'	

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-2
  stage: ${opt:stage,'dev'}
  environment:
    AWS_KEY: ${env:AWS_KEY}
    AWS_SECRET: ${env:AWS_SECRET}
    AWS_SECRET_SES: ${env:AWS_SECRET_SES}
    AWS_BUCKET: ${env:AWS_BUCKET}
    AWS_UPLOAD_BUCKET: ${env:AWS_UPLOAD_BUCKET}

plugins:
  - serverless-esbuild

# only include the Prisma binary required on AWS Lambda while packaging
package:
  patterns:
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'
    - '../../node_modules/.prisma/client/**'
    - 'dist/schema.prisma'

custom:
  esbuild:
    bundle: true
    minify: false
    platform: "node"
    target: "es2020"
    concurrency: 10

layers:
  sharp:
    path: lambdaLayers/SharpLayer
    name: ${self:provider.stage}-sharp
    package: 
      patterns:
        - node_modules/**
    description: sharp@0.31.3
    compatibleRuntimes:
      - nodejs18.x
    licenseInfo: Apache License 2.0
    retain: false

resources:
  Resources:
    S3Assets:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: portfolio-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"

functions:
  processCreatedObject:
    handler: dist/index.handler
    events:
      - s3:
          bucket: portfolio-uploads
          event: s3:ObjectCreated:*
          existing: true